#!/usr/bin/env bash
if [[ "$1" == "-h" || "$1" == "--help" ]]; then cat <<HELP

Usage: $(basename "$0")
Please Not Using this Right Now
HELP
exit; fi

###########################################
# GENERAL PURPOSE EXPORTED VARS / FUNCTIONS
###########################################

# Where the magic happens.
TEST_DIR=`pwd`
export DOTFILES=$TEST_DIR/test/.dotfiles

# Logging stuff.
function e_header()   { echo -e "\n\033[1m$@\033[0m"; }
function e_success()  { echo -e " \033[1;32m✔\033[0m  $@"; }
function e_error()    { echo -e " \033[1;31m✖\033[0m  $@"; }
function e_arrow()    { echo -e " \033[1;34m➜\033[0m  $@"; }

# For testing.
function assert() {
  local success modes equals actual expected
  modes=(e_error e_success); equals=("!=" "=="); expected="$1"; shift
  actual="$("$@")"
  [[ "$actual" == "$expected" ]] && success=1 || success=0
  ${modes[success]} "\"$actual\" ${equals[success]} \"$expected\""
}

# Test if the dotfiles script is currently
function is_dotfiles_running() {
  [[ "$DOTFILES_SCRIPT_RUNNING" ]] || return 1
}

# Test if this script was run via the "dotfiles" bin script (vs. via curl/wget)
function is_dotfiles_bin() {
  [[ "$(basename $0 2>/dev/null)" == dotfiles ]] || return 1
}

# OS detection
function is_manjaro() {
  [[ "$(cat /etc/issue 2> /dev/null)" =~ Manjaro ]] || return 1
}

# Remove an entry from $PATH
# Based on http://stackoverflow.com/a/2108540/142339
function path_remove() {
  local arg path
  path=":$PATH:"
  for arg in "$@"; do path="${path//:$arg:/:}"; done
  path="${path%:}"
  path="${path#:}"
  echo "$path"
}

# Display a fancy multi-select menu.
# Inspired by http://serverfault.com/a/298312
function prompt_menu() {
  local exitcode prompt choices nums i n
  exitcode=0
  if [[ "$2" ]]; then
    _prompt_menu_draws "$1"
    read -t $2 -n 1 -sp "Press ENTER or wait $2 seconds to continue, or press any other key to edit."
    exitcode=$?
    echo ""
  fi 1>&2
  if [[ "$exitcode" == 0 && "$REPLY" ]]; then
    prompt="Toggle options (Separate options with spaces, ENTER when done): "
    while _prompt_menu_draws "$1" 1 && read -rp "$prompt" nums && [[ "$nums" ]]; do
      _prompt_menu_adds $nums
    done
  fi 1>&2
  _prompt_menu_adds
}

function _prompt_menu_iter() {
  local i sel state
  local fn=$1; shift
  for i in "${!menu_options[@]}"; do
    state=0
    for sel in "${menu_selects[@]}"; do
      [[ "$sel" == "${menu_options[i]}" ]] && state=1 && break
    done
    $fn $state $i "$@"
  done
}

function _prompt_menu_draws() {
  e_header "$1"
  _prompt_menu_iter _prompt_menu_draw "$2"
}

function _prompt_menu_draw() {
  local modes=(error success)
  if [[ "$3" ]]; then
    e_${modes[$1]} "$(printf "%2d) %s\n" $(($2+1)) "${menu_options[$2]}")"
  else
    e_${modes[$1]} "${menu_options[$2]}"
  fi
}

function _prompt_menu_adds() {
  _prompt_menu_result=()
  _prompt_menu_iter _prompt_menu_add "$@"
  menu_selects=("${_prompt_menu_result[@]}")
}

function _prompt_menu_add() {
  local state i n keep match
  state=$1; shift
  i=$1; shift
  for n in "$@"; do
    if [[ $n =~ ^[0-9]+$ ]] && (( n-1 == i )); then
      match=1; [[ "$state" == 0 ]] && keep=1
    fi
  done
  [[ ! "$match" && "$state" == 1 || "$keep" ]] || return
  _prompt_menu_result=("${_prompt_menu_result[@]}" "${menu_options[i]}")
}

# Array filter. Calls map_fn for each item ($1) and index ($2) in array.
# Returns filtered array containing array values.
# Returns filtered array containing array indices.
# Usage: array_filter_i array_name filter_fn


# If this file was being sourced, exit now.
[[ "$1" == "source" ]] && return


###########################################
# INTERNAL DOTFILES "INIT" VARS / FUNCTIONS
###########################################

DOTFILES_SCRIPT_RUNNING=1
function cleanup {
  unset DOTFILES_SCRIPT_RUNNING
}
trap cleanup EXIT

# Set the prompt delay to be longer for the very first run.
export prompt_delay=5; is_dotfiles_bin || prompt_delay=15

# Keep-alive: update existing sudo time stamp if set, otherwise do nothing.
# Note that this doesn't work with Homebrew, since brew explicitly invalidates
# the sudo timestamp, which is probably wise.
# See https://gist.github.com/cowboy/3118588
while true; do sudo -n true; sleep 10; kill -0 "$$" || exit; done 2>/dev/null &

# select china mirrors
sudo pacman-mirrors -i -c China -m rank

# Install a custom sudoers file that allows "sudo apt-get" to be executed
# without asking for a password.
sudoers_file=/etc/sudoers.d/setup-dotfiles
# Contents of the sudoers file.
function sudoers_text() {
  cat <<EOF
# This file was created by cowboy's dotfiles script on $(date -I)
# (which will never update it, only recreate it if it's missing)
# Sudoers reference: http://ubuntuforums.org/showthread.php?t=1132821

# Command aliases.
Cmnd_Alias PACMAN = /usr/bin/pacman

# Members of the sudo and admin groups can run these commands without password.
%walker_yang ALL=(ALL) ALL, NOPASSWD:PACMAN
%walker ALL=(ALL) ALL, NOPASSWD:PACMAN
EOF
}
# Bash commands to update the sudoers file.
function sudoers_code() {
  cat <<EOF
echo "$(sudoers_text)" > $sudoers_file
chmod 0440 $sudoers_file
if visudo -c; then
  echo; echo "Sudoers file created."
else
  rm $sudoers_file
  echo; echo "Unable to create sudoers file."
fi
EOF
}
# Offer to create the sudjoers file if it doesn't exist.
if is_manjaro && [[ ! -e $sudoers_file ]]; then
  cat <<EOF

The sudoers file can be updated to allow "sudo pacman" to be executed
without asking for a password. You can verify that this worked correctly by
running "sudo -k pacman". If it doesn't ask for a password, and the output
looks normal, it worked.

THIS SHOULD ONLY BE ATTEMPTED IF YOU ARE LOGGED IN AS ROOT IN ANOTHER SHELL.

This will be skipped if "Y" isn't pressed within the next $prompt_delay seconds.
EOF
  read -N 1 -t $prompt_delay -p "Update sudoers file? [y/N] " update_sudoers; echo
  if [[ "$update_sudoers" =~ [Yy] ]]; then
    e_header "Creating sudoers file"
    sudo bash -c "$(sudoers_code)"
  else
    echo "Skipping."
  fi
else
    echo "Not Manjaro, Exit"
    exit
fi

sudo cp /etc/pacman.conf /etc/pacman.conf.bak
cp /etc/pacman.conf /tmp/pacman.conf
echo "[archlinuxcn]" >> /tmp/pacman.conf
echo "SigLevel = Optional TrustedOnly" >> /tmp/pacman.conf
echo "Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch" >> /tmp/pacman.conf
sudo cp /tmp/pacman.conf /etc/pacman.conf

# Upgrade systems
sudo pacman -Syyu

# Setup archlinuxcn keyring
sudo pacman -S archlinuxcn-keyring

# If gcc is not installed, install it 
if [[ ! "$(type -p gcc)" ]]; then
  e_header "Installing Gcc"
  sudo pacman -S gcc
fi

# If Git is not installed, install it 
if [[ ! "$(type -p git)" ]]; then
  e_header "Installing Git"
  sudo pacman -S git
fi

# If Git isn't installed by now, something exploded. We gots to quit!
if [[ ! "$(type -p git)" ]]; then
  e_error "Git should be installed. It isn't. Aborting."
  exit 1
fi


# Initialize.
# Install chrome
sudo pacman -S google-chrome

# Install sogou inputmethord
sudo pacman -S fcitx
sudo pacman -S fcitx-sogoupinyin

echo "export GTK_IM_MODULE=fcitx" >> ~/.xprofile
echo "export QT_IM_MODULE=fcitx" >> ~/.xprofile
echo "export XMODIFIERS=@im=fcitx" >> ~/.xprofile

# Install zsh
sudo pacman -S zsh
sudo pacman -S python-pygments
sudo pacman -S autojump
sudo pacman -S neovim

# sudo pacman -S uget
# sudo pacman -S aria2
# sudo pacman -S typora
# sudo pacman -S krita
# sudo pacman -S gimp
# sudo pacman -S deepin-screenshot
sudo pacman -S yay base-devel

sudo pacman -S fzf
sudo pacman -S bat
sudo pacman -S prettyping
sudo pacman -S ncdu

setup_myzsh.sh

curl -sLf https://spacevim.org/install.sh | bash

yay -S wps-office
yay -S ttf-wps-fonts

# clean unused package
sudo pacman -R $(pacman -Qdtq)

# remove already installed package
sudo pacman -Scc
# Add binaries into the path
[[ -d $DOTFILES/bin ]] && export PATH=$DOTFILES/bin:$PATH

# Create caches dir and init subdir, if they don't already exist.
mkdir -p "$DOTFILES/caches/init"

# If backups are needed, this is where they'll go.
backup_dir="$DOTFILES/backups/$(date "+%Y_%m_%d-%H_%M_%S")/"
backup=

# Execute code for each file in these subdirectories.

# Alert if backups were made.
if [[ "$backup" ]]; then
  echo -e "\nBackups were moved to ~/${backup_dir#$HOME/}"
fi

# All done!
e_header "All done!"
